Description:

Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

//MyCode
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = {0, 0};
        for (int j = 0;j < nums.length - 1;j++){
            for (int k = j + 1; k < nums.length;k++){
                if (nums[j] + nums[k] == target){
                    result[0] = j;
                    result[1] = k;
                    return result;
                }
            }
        }
        return result;
    }
}

//Better Thoughts
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        map.put(nums[i], i);
    }
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement) && map.get(complement) != i) {
            return new int[] { i, map.get(complement) };
        }
    }
    throw new IllegalArgumentException("No two sum solution");
}
